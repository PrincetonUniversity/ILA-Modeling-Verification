{
  "target ILA": "vlg-gen/pipe.v:simpePipe",
  "target Verilog": "verilog/simple_pipe.v:pipeline_v",

  "global invariants": [ 
    "(! (m1.reg_0_w_stage == 2'b00 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd0 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd0 ) )",
    "(! (m1.reg_1_w_stage == 2'b00 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd1 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd1 ) )",
    "(! (m1.reg_2_w_stage == 2'b00 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd2 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd2 ) )",
    "(! (m1.reg_3_w_stage == 2'b00 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd3 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd3 ) )",
    
    "(! (m1.reg_0_w_stage == 2'b10 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd0 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd0 ) )",
    "(! (m1.reg_1_w_stage == 2'b10 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd1 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd1 ) )",
    "(! (m1.reg_2_w_stage == 2'b10 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd2 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd2 ) )",
    "(! (m1.reg_3_w_stage == 2'b10 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd3 ) && ( m1.ex_wb_reg_wen == 0 || m1.ex_wb_rd != 2'd3 ) )",
    
    "(! (m1.reg_0_w_stage == 2'b11 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd0 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd0 ) )",
    "(! (m1.reg_1_w_stage == 2'b11 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd1 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd1 ) )",
    "(! (m1.reg_2_w_stage == 2'b11 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd2 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd2 ) )",
    "(! (m1.reg_3_w_stage == 2'b11 ) ) ||  ( ( m1.id_ex_reg_wen == 1 && m1.id_ex_rd == 2'd3 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd3 ) )",
    
    "(! (m1.reg_0_w_stage == 2'b01 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd0 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd0 ) )",
    "(! (m1.reg_1_w_stage == 2'b01 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd1 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd1 ) )",
    "(! (m1.reg_2_w_stage == 2'b01 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd2 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd2 ) )",
    "(! (m1.reg_3_w_stage == 2'b01 ) ) ||  ( ( m1.id_ex_reg_wen == 0 || m1.id_ex_rd != 2'd3 ) && ( m1.ex_wb_reg_wen == 1 && m1.ex_wb_rd == 2'd3 ) )"
  ],

  "instructions": [
    {
      "instruction": "NOP",
      "start decode": ["dummy_reset == 0", "inst[7:6] == 2'b00"], 
      "ready signal": [],  
      "ready bound": 3,

      "flush constraint": []
    },
    {
      "instruction": "ADD",
      "start decode": ["dummy_reset == 0", "inst[7:6] == 2'b01"], 
      "ready signal": [],  
      "ready bound": 3,

      "flush constraint": []
    },
    {
      "instruction": "SUB",
      "start decode": ["dummy_reset == 0", "inst[7:6] == 2'b10"], 
      "ready signal": [],  
      "ready bound": 3,

      "flush constraint": []
    },
    {
      "instruction": "AND",
      "start decode": ["dummy_reset == 0", "inst[7:6] == 2'b11"],
      "ready signal": [],
      "ready bound": 3,

      "flush constraint": []
    }
  ]
}

