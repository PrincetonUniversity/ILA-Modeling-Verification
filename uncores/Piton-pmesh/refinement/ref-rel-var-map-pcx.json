{
  "models": { "ILA":"m0" , "VERILOG": "m1" },
  "state mapping": { 

  "l15_noc1buffer_req_val"              : "m1.l15.pipeline.l15_noc1buffer_req_val",
  "l15_noc1buffer_req_address"          : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_address"       ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_address"      ]  ],
  "l15_noc1buffer_req_noncacheable"     : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_non_cacheable" ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_non_cacheable"]  ],
  "l15_noc1buffer_req_size"             : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_size"          ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_size"         ]  ],
  "l15_noc1buffer_req_threadid"         : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_threadid"      ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_threadid"     ]  ],
  "l15_noc1buffer_req_mshrid"           : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_mshrid"        ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_mshrid"       ]  ],
  "l15_noc1buffer_req_type"             : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_type"          ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_type"         ]  ],
  "l15_noc1buffer_req_data_0"           : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_data_0"        ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_data_0"       ]  ],
  "l15_noc1buffer_req_data_1"           : [ ["__START__" , "m1.l15.pipeline.l15_noc1buffer_req_data_1"        ], ["__IEND__ & m1.l15.pipeline.l15_noc1buffer_req_val", "m1.l15.pipeline.l15_noc1buffer_req_data_1"       ]  ],

  "l15_noc3encoder_req_val"             : "m1.l15.pipeline.l15_noc3encoder_req_val",
  "l15_noc3encoder_req_type"            : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_type"          ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_type"         ] ] ,
  "l15_noc3encoder_req_data_0"          : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_data_0"        ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_data_0"       ] ] ,
  "l15_noc3encoder_req_data_1"          : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_data_1"        ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_data_1"       ] ] ,
  "l15_noc3encoder_req_mshrid"          : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_mshrid"        ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_mshrid"       ] ] ,
  "l15_noc3encoder_req_threadid"        : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_threadid"      ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_threadid"     ] ] ,
  "l15_noc3encoder_req_address"         : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_address"       ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_address"      ] ] ,
  "l15_noc3encoder_req_was_inval"       : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_was_inval"     ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_was_inval"    ] ] ,
  "l15_noc3encoder_req_with_data"       : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_with_data"     ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_with_data"    ] ] ,
  "l15_noc3encoder_req_fwdack_vector"   : [ [ "__START__" , "m1.l15.pipeline.l15_noc3encoder_req_fwdack_vector" ] , [ "__IEND__ & m1.l15.pipeline.l15_noc3encoder_req_val" , "m1.l15.pipeline.l15_noc3encoder_req_fwdack_vector"] ] ,

  "l15_transducer_val"                  : "m1.l15_transducer_val",
  "l15_transducer_threadid"             : [ ["__START__" , "m1.l15_transducer_threadid"             ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_threadid"             ] ] ,
  "l15_transducer_returntype"           : [ ["__START__" , "m1.l15_transducer_returntype"           ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_returntype"           ] ] ,
  "l15_transducer_noncacheable"         : [ ["__START__" , "m1.l15_transducer_noncacheable"         ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_noncacheable"         ] ] ,
  "l15_transducer_atomic"               : [ ["__START__" , "m1.l15_transducer_atomic"               ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_atomic"               ] ] ,
  "l15_transducer_data_0"               : [ ["__START__" , "m1.l15_transducer_data_0"               ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_data_0"               ] ] ,
  "l15_transducer_data_1"               : [ ["__START__" , "m1.l15_transducer_data_1"               ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_data_1"               ] ] ,
  "l15_transducer_data_2"               : [ ["__START__" , "m1.l15_transducer_data_2"               ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_data_2"               ] ] ,
  "l15_transducer_data_3"               : [ ["__START__" , "m1.l15_transducer_data_3"               ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_data_3"               ] ] ,
  "l15_transducer_inval_address_15_4"   : [ ["__START__" , "m1.l15_transducer_inval_address_15_4"   ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_inval_address_15_4"   ] ] ,
  "l15_transducer_inval_icache_all_way" : [ ["__START__" , "m1.l15_transducer_inval_icache_all_way" ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_inval_icache_all_way" ] ] ,
  "l15_transducer_inval_dcache_inval"   : [ ["__START__" , "m1.l15_transducer_inval_dcache_inval"   ] , [ "__IEND__ & m1.l15_transducer_val", "m1.l15_transducer_inval_dcache_inval"   ] ] ,

  "fetch_state_s1" : [["__START__","m1.l15.pipeline.fetch_state_s1"],["__IEND__","#fetch_state_s1_write#"]],

  "address_to_mesi_map_map_val"      : [["__START__","#address_to_mesi_read#"], ["__IEND__", "#address_to_mesi_write#"]],
  "address_to_data_map_map_val"      : [["__START__","#address_to_data_read#"], ["__IEND__", "#address_to_data_write#"]],
  "address_to_mshr_map_map_val"      : [["__START__","#mshr_missed_read#"], ["__IEND__", "#mshr_allocate_new#"]],
  "address_to_mshr_data_map_map_val" : [["__START__","#address_to_mshr_data_map_read#"], ["__IEND__", "#address_to_mshr_data_map_write#"]]

  },

  "value-holder": {

    "address_to_mesi_read" : {
      "cond": "#monitor_s2# && ~ #monitor_s3#",
      "val" : "m1.l15.pipeline.tagcheck_state_s2",
      "width" : "auto"
    },

    "address_to_mesi_write" : {
      "cond": "#monitor_s2# && ~ #monitor_s3#",
      "val" : "m1.l15.pipeline.mesi_write_state_s2",
      "width" : "auto"
    },

    "address_to_data_read" : {
      "cond": "#monitor_s3#",
      "val" : "m1.l15.pipeline.dcache_l15_dout_s3",
      "width" : "auto"
    },

    "address_to_data_write" : {
      "cond": "#monitor_s2# && ~ #monitor_s3#",
      "val" : "m1.l15.pipeline.l15_dcache_write_data_s2",
      "width" : "auto"
    },

    "mshr_missed_read" : {
      "cond": "#monitor_s1# && ~ #monitor_s2#",
      "val" : "m1.l15.pipeline.predecode_hit_stbuf_s1",
      "width" : "auto"
    },
    

    "fetch_state_s1_write" : {
      "cond": "#monitor_s2# && ~ #monitor_s3#",
      "val" : "m1.l15.pipeline.fetch_state_s1",
      "width" : "auto"
    },

// fix this!!!

    "address_to_mshr_data_map_read"   : {
      "cond" : "#monitor_s2#", "val" : "m1.l15.pipeline.mshr_pipe_write_buffer_s2", "width": "auto"
      }, // mshr_pipe_write_buffer_s2 
    "address_to_mshr_data_map_write"  : {
      "cond"  : "#monitor_s1#",
      "val"   : "m1.l15.pipeline.pipe_mshr_writereq_write_buffer_data_s1",
      "width" : "auto"
    },

    // use to maintain constant value while exec
    "transducer_l15_address_keep"              : {"cond" : "1'b1", "val" : "m1.transducer_l15_address", "width"              : "auto"},
    "transducer_l15_data_keep"                 : {"cond" : "1'b1", "val" : "m1.transducer_l15_data", "width"                 : "auto"},
    "transducer_l15_data_next_entry_keep"      : {"cond" : "1'b1", "val" : "m1.transducer_l15_data_next_entry", "width"      : "auto"},
    "transducer_l15_nc_keep"                   : {"cond" : "1'b1", "val" : "m1.transducer_l15_nc", "width"                   : "auto"},
    "transducer_l15_rqtype_keep"               : {"cond" : "1'b1", "val" : "m1.transducer_l15_rqtype", "width"               : "auto"},
    "transducer_l15_size_keep"                 : {"cond" : "1'b1", "val" : "m1.transducer_l15_size", "width"                 : "auto"},
    "transducer_l15_threadid_keep"             : {"cond" : "1'b1", "val" : "m1.transducer_l15_threadid", "width"             : "auto"},
    "transducer_l15_val_keep"                  : {"cond" : "1'b1", "val" : "m1.transducer_l15_val", "width"                  : "auto"},
    "transducer_l15_amo_op_keep"               : {"cond" : "1'b1", "val" : "m1.transducer_l15_amo_op", "width"               : "auto"},
    "transducer_l15_invalidate_cacheline_keep" : {"cond" : "1'b1", "val" : "m1.transducer_l15_invalidate_cacheline", "width" : "auto"}
  }, // end of value holder


  "verilog-inline-monitors":{
    "stage_tracker" : {
      "verilog": 
        [
          "always @(*) begin monitor_s1 = m1.l15.pipeline.val_s1 & ~monitor_s1_already & __START__; end",
          "always @(posedge clk) begin",
          "    if(rst)",
          "        monitor_s1_already <= 0;",
          "    else if (monitor_s1 && monitor_s2_nxt)",
          "        monitor_s1_already <= 1;",
          "end",
          "always @(*) begin monitor_s2_nxt = ",
          " monitor_s2 == 1'b0 ? (m1.l15.pipeline.stall_s1 ? monitor_s2 : monitor_s1) :",
          "  (m1.l15.pipeline.stall_s2 ? 1'b1 : 1'b0) ; end",
          "always @(posedge clk) begin",
          "    if(rst) begin",
          "        monitor_s2 <= 0;",
          "        monitor_s2_already <= 0;",
          "    end",
          "    else begin",
          "        monitor_s2 <= monitor_s2_nxt;",
          "        if (monitor_s2 & monitor_s3_nxt)",
          "            monitor_s2_already <= 1;",
          "    end",
          "end",
          "always @(*) begin monitor_s3_nxt = ",
          "  monitor_s3 == 1'b0 ? (m1.l15.pipeline.stall_s2 ? monitor_s3 : monitor_s2) : ",
          "  (m1.l15.pipeline.stall_s3 ? 1'b1 : 1'b0); end",
          "always @(posedge clk) begin",
          "    if(rst) begin",
          "        monitor_s3 <= 0;",
          "        monitor_s3_delay <= 0;",
          "    end",
          "    else begin",
          "        monitor_s3 <= monitor_s3_nxt;",
          "        if (monitor_s3)",
          "            monitor_s3_delay <= 1'b1; // enough",
          "    end",
          "end",
          "// monitor_correctness_1 : assert property (! (monitor_s1_already && monitor_s1));",
          "// monitor_correctness_2 : assert property (! (monitor_s2_already && monitor_s2));",
          "// monitor_correctness_3 : assert property ( (monitor_s3_delay && !monitor_s3) |=>  (!monitor_s3) );",
          "always @(*) begin end_of_pipeline = monitor_s3 && ~monitor_s3_delay ; end // just check one cycle"
        ],
      "defs" :
          [
          ["monitor_s1_already"  , 1 , "reg"]  ,
          ["end_of_pipeline"     , 1 , "reg"]  ,
          ["monitor_s1"          , 1 , "reg"]  ,
          ["monitor_s1_delay"    , 1 , "reg"]  ,
          ["monitor_s2"          , 1 , "reg"]  ,
          ["monitor_s2_nxt"      , 1 , "reg"]  ,
          ["monitor_s2_already"  , 1 , "reg"]  ,
          ["monitor_s3"          , 1 , "reg"]  ,
          ["monitor_s3_nxt"      , 1 , "reg"]  ,
          ["monitor_s3_delay"    , 1 , "reg"]] ,

      "refs" :["m1.l15.pipeline.val_s1", "m1.l15.pipeline.stall_s3", "m1.l15.pipeline.stall_s2", "m1.l15.pipeline.stall_s1" ]
    },

    "mshr_tracker" : {
      "verilog":
        [
        "always @(posedge clk) begin",
        "    if (rst) begin",
        "        saved_mshr_write_val_s1 <= 1'b0;",
        "    end",
        "    else begin",
        "        if (m1.l15.pipeline.s1_mshr_write_val_s1 && monitor_s1) begin",
        "            saved_mshr_write_val_s1 <= m1.l15.pipeline.s1_mshr_write_val_s1;",
        "            saved_mshr_write_type_s1 <= m1.l15.pipeline.s1_mshr_write_type_s1;",
        "        end",
        "    end",
        "end",
        "always @(*) begin mshr_allocate_new = ( saved_mshr_write_val_s1 && saved_mshr_write_type_s1 == 3'b001 ", //`L15_MSHR_WRITE_TYPE_ALLOCATION
        "    && ! (monitor_s3 && m1.l15.pipeline.pipe_mshr_val_s3 && m1.l15.pipeline.pipe_mshr_op_s3 == 3'b010) );", //`L15_MSHR_WRITE_TYPE_DEALLOCATION
        "end"],
      "defs" :[ ["saved_mshr_write_val_s1", 1, "reg"] ,["saved_mshr_write_type_s1", 3, "reg"],
                ["mshr_allocate_new", 1, "reg"]
              ],
      "refs" :[ "m1.l15.pipeline.s1_mshr_write_val_s1", "m1.l15.pipeline.s1_mshr_write_type_s1",
                "m1.l15.pipeline.pipe_mshr_val_s3", "m1.l15.pipeline.pipe_mshr_op_s3" ]
    }
  }, // verilog-inline-monitors

  "interface mapping": {
     "rst_n"         :           "**NRESET**", 
     "clk"           :           "**CLOCK**",

      "transducer_l15_address"             :"transducer_l15_address"             ,
      "transducer_l15_data"                :"transducer_l15_data"                ,
      "transducer_l15_data_next_entry"     :"transducer_l15_data_next_entry"     ,
      "transducer_l15_nc"                  :"transducer_l15_nc"                  ,
      "transducer_l15_rqtype"              :"transducer_l15_rqtype"              ,
      "transducer_l15_size"                :"transducer_l15_size"                ,
      "transducer_l15_threadid"            :"transducer_l15_threadid"            ,
      "transducer_l15_val"                 :"transducer_l15_val"                 ,
      "transducer_l15_amo_op"              :"transducer_l15_amo_op"              ,
      "transducer_l15_invalidate_cacheline":"transducer_l15_invalidate_cacheline",

      "transducer_l15_prefetch"       : "**KEEP**",
      "transducer_l15_blockstore"     : "**KEEP**",
      "transducer_l15_blockinitstore" : "**KEEP**",
      "transducer_l15_l1rplway"       : "**KEEP**",
      "transducer_l15_csm_data"       : "**KEEP**",

      "l15_transducer_ack"       :"**KEEP**",
      "l15_transducer_header_ack":"**KEEP**",

      "l15_transducer_val"          : "**SO**",
      "l15_transducer_returntype"   : "**SO**",
      "l15_transducer_noncacheable" : "**SO**",
                         
      "l15_transducer_atomic"              :"**SO**",
      "l15_transducer_data_0"              :"**SO**",
      "l15_transducer_data_1"              :"**SO**",
      "l15_transducer_data_2"              :"**SO**",
      "l15_transducer_data_3"              :"**SO**",
      "l15_transducer_inval_address_15_4"  :"**SO**",
      "l15_transducer_inval_icache_all_way":"**SO**",
      "l15_transducer_inval_dcache_inval"  :"**SO**",
      "l15_transducer_threadid"            :"**SO**",

      "l15_transducer_l2miss"   : "**KEEP**",
      "l15_transducer_error"    : "**KEEP**",
      "l15_transducer_prefetch" : "**KEEP**",
      "l15_transducer_f4b"      : "**KEEP**",

      "l15_transducer_inval_dcache_all_way" : "**KEEP**",
      "l15_transducer_cross_invalidate"     : "**KEEP**",
      "l15_transducer_cross_invalidate_way" : "**KEEP**",
      "l15_transducer_inval_icache_inval"   : "**KEEP**",
      "l15_transducer_inval_way"            : "**KEEP**",
      "l15_transducer_blockinitstore"       : "**KEEP**",

      "transducer_l15_req_ack":"**KEEP**",

      "noc1_out_rdy"   : "**KEEP**",
      "noc2_in_val"    : "**KEEP**",
      "noc2_in_data"   : "**KEEP**",
      "noc3_out_rdy"   : "**KEEP**",
      "dmbr_l15_stall" : "**KEEP**",
      "chipid"         : "**KEEP**",
      "coreid_x"       : "**KEEP**",
      "coreid_y"       : "**KEEP**",

      "config_l15_read_res_data_s3"  : "**KEEP**",
      "config_csm_en"                : "**KEEP**",
      "config_system_tile_count_5_0" : "**KEEP**",
      "config_home_alloc_method"     : "**KEEP**",
      "config_hmt_base"              : "**KEEP**",

      "noc1_out_val"  : "**KEEP**",
      "noc1_out_data" : "**KEEP**",
      "noc2_in_rdy"   : "**KEEP**",
      "noc3_out_val"  : "**KEEP**",
      "noc3_out_data" : "**KEEP**",

      "l15_dmbr_l1missIn"     : "**KEEP**",
      "l15_dmbr_l1missTag"    : "**KEEP**",
      "l15_dmbr_l2responseIn" : "**KEEP**",
      "l15_dmbr_l2missIn"     : "**KEEP**",
      "l15_dmbr_l2missTag"    : "**KEEP**",

      "l15_config_req_val_s2"        : "**KEEP**",
      "l15_config_req_rw_s2"         : "**KEEP**",
      "l15_config_write_req_data_s2" : "**KEEP**",
      "l15_config_req_address_s2"    : "**KEEP**",

      "srams_rtap_data"         : "**KEEP**",
      "rtap_srams_bist_command" : "**KEEP**",
      "rtap_srams_bist_data"    : "**KEEP**"
  },

  "assumptions" : [ 
    "__VLG_I_transducer_l15_prefetch == 0",
    "__VLG_I_transducer_l15_blockstore == 0",
    "__VLG_I_transducer_l15_blockinitstore == 0",
    "__VLG_I_transducer_l15_l1rplway == 0",
    "__VLG_I_transducer_l15_csm_data == 0",

    "__VLG_I_noc1_out_rdy == 1",
    "__VLG_I_noc3_out_rdy == 1",
    "__VLG_I_noc2_in_val == 0", // make it non valid, but also the internal one.
    "__VLG_I_dmbr_l15_stall == 0",
    "__VLG_I_chipid == 0",
    "__VLG_I_coreid_x == 0",
    "__VLG_I_coreid_y == 0",

    "__VLG_I_config_l15_read_res_data_s3 == 0",
    "__VLG_I_config_csm_en == 0",
    "__VLG_I_config_system_tile_count_5_0 == 1",
    "__VLG_I_config_home_alloc_method == 2'b11",
    "__VLG_I_config_hmt_base == 0",

    "__VLG_I_rtap_srams_bist_command == 0",
    "__VLG_I_rtap_srams_bist_data == 0",

    "~ (__VLG_O_l15_transducer_ack) ||  ( __VLG_I_transducer_l15_req_ack == 1) "

    ],

  "functions":{
    "wmt_compare_match_s3" : [["#monitor_s3#","m1.l15.pipeline.wmt_compare_match_s3"]]
  }



}
